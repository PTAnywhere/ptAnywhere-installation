---

- name: Install EPEL Repository
  yum: name="http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm" state=present
  become: True
  tags:
   - install
   - repository
   - epel


- name: Install Git and virtualenv
  yum: name="{{ item }}" state=present
  become: True
  with_items:
    - git
    - python-pip
    - python-virtualenv
  # when: ansible_os_family == "RedHat"
  tags:
    - install
    - git
    - yum


- name: Set proxies in Git
  shell: "git config --global {{ item.var_name }} {{ item.proxy_value }}"
  when: item.proxy_value
  with_items:
    - { var_name: 'http.proxy', proxy_value: '{{ proxy_env.http_proxy }}' }
    - { var_name: 'https.proxy', proxy_value: '{{ proxy_env.https_proxy }}' }
  tags:
    - configure
    - proxy


- name: Unset proxies in Git
  shell: git config --global --unset '{{ item.var_name }}'
  when: not item.proxy_value
  register: git_return
  # rc==5 means that the option didn't exist, which is ok too.
  # https://www.kernel.org/pub/software/scm/git/docs/git-config.html
  failed_when: git_return.rc!=0 and git_return.rc!=5
  with_items:
    - { var_name: 'http.proxy', proxy_value: '{{ proxy_env.http_proxy }}' }
    - { var_name: 'https.proxy', proxy_value: '{{ proxy_env.https_proxy }}' }
  tags:
    - configure
    - proxy
    - git


- name: Install PT management API
  pip: name="{{ url }}" virtualenv="{{ venv_path }}"
  tags:
    - install
    - api
    - pt-instances-management


- name: Define webapp's limits
  template: src=config.ini.j2 dest="{{ config_file }}"
  tags:
   - copy
   - configuration
   - api


- name: Check if database file already exists
  stat: path="{{ database_file }}"
  register: dbfile
  tags:
    - database
    - api
    - existence


- name: Create database file
  shell: "{{ venv_path }}/bin/python {{ venv_path }}/src/ptinstancemanager/src/ptinstancemanager/run.py -createdb -config {{ config_file }}"
  when: not dbfile.stat.exists
  tags:
   - create
   - database
   - file
   - api


- name: Create directory for storing cached files
  file: path="{{ files_cache_path }}" state=directory
  tags:
   - create
   - cache
   - directory
   - api


- name: Create script to start development server
  template: src=development_start.sh.j2 dest={{ devel_script }} mode=ug+x
  tags:
   - copy
   - script
   - development
   - api
